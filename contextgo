package context

import (
	"os"
	"path/filepath"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/michaeldwan/static/printer"
)

var config *Config

func CurrentConfig() Config {
	return *config
}

func Initialize(configFilePath string) {
	configFilePath, _ = filepath.Abs(configFilePath)
	reader, err := os.Open(configFilePath)
	if os.IsNotExist(err) {
		printer.Infof("Config file %s not found\n", configFilePath)
		os.Exit(1)
	}
	config = newConfig(configFilePath, reader)
	tmpDir = newWorkingDir(configFilePath)
}

func Reset() {
	config = nil
}

var (
	DryRun             bool
	Force              bool
	Concurrency        int
	Verbose            bool
	AWSAccessKeyId     string
	AWSSecretAccessKey string
	AWSSessionToken    string
)

// type Flags struct {
// 	// DryRun      bool
// 	// Force       bool
// 	Concurrency int
// 	Verbose     bool
// }

// type Context struct {
// 	Config
// 	workingDir     workingDir
// 	awsCredentials *credentials.Credentials
// 	s3Client       *s3.S3
// 	cfClient       *cloudfront.CloudFront
// 	Flags          Flags
// }
//

var tmpDir workingDir

func TempFile() *os.File {
	return tmpDir.tempFile()
}

func Clean() {
	tmpDir.clean()
}

var creds *credentials.Credentials

func AwsCredentials() *credentials.Credentials {
	if creds == nil {
		creds = credentials.NewChainCredentials(
			[]credentials.Provider{
				&credentials.StaticProvider{Value: credentials.Value{
					AccessKeyID:     AWSAccessKeyId,
					SecretAccessKey: AWSSecretAccessKey,
					SessionToken:    AWSSessionToken,
				}},
				&credentials.EnvProvider{},
				&credentials.SharedCredentialsProvider{},
			})
	}
	return creds
}

var s3Client *s3.S3

func S3Client() *s3.S3 {
	if s3Client == nil {
		s3Client = s3.New(&aws.Config{
			Region:      CurrentConfig().S3Region,
			Credentials: AwsCredentials(),
		})
	}
	return s3Client
}

var cloudFrontClient *cloudfront.CloudFront

func CloudFrontClient() *cloudfront.CloudFront {
	if cloudFrontClient == nil {
		cloudFrontClient = cloudfront.New(&aws.Config{
			Credentials: AwsCredentials(),
		})
	}
	return cloudFrontClient
}
